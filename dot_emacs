;;; .emacs --- Personal Emacs configuration -*- lexical-binding: t; -*-
;;;
;;; Commentary:
;;;
;;; Written by Marc Henry de Frahan
;;;
;;; Required externals:
;;; - aspell or hunspell
;;; - emms-print-metadata
;;; - global
;;; - clang/llvm
;;; - ccls
;;; - mp3info
;;; - mpv
;;; - pianobar
;;; - shellcheck
;;; - vlc
;;; - vorbis-tools
;;;
;;; Code:

;;================================================================================
;;
;; Set up
;;
;;================================================================================
(setq custom-file (concat user-emacs-directory "custom.el"))
(when (file-exists-p custom-file)
  (load custom-file 'noerror))
(setq inhibit-startup-screen t)
(setq kill-ring-max 200)
(setq user-full-name "Marc Henry de Frahan")
(set-face-attribute 'default nil :height 110 :font "MesloLGL Nerd Font Mono-14")

;; never tabs
(setq-default indent-tabs-mode nil)

;; syntax color
(global-font-lock-mode t)

;; For accents. To toggle: C-\
(setq default-input-method "latin-1-prefix")

;;Turn alarm completely off
(setq ring-bell-function 'ignore )

;; Never follow symlinks (don't prompt to ask). This allows me to keep
;; the syntax coloring when editing a symlinked file (useful for the
;; dotfiles thing)
(setq vc-follow-symlinks nil)

;; Backup. A lot.
(setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
(setq delete-old-versions -1)
(setq version-control t)
(setq vc-make-backup-files t)
(setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))

;; Change "yes or no" to "y or n"
(fset 'yes-or-no-p 'y-or-n-p)

;; warn when opening files bigger than 200MB
(setq large-file-warning-threshold 200000000)

;; silence warnings from native-comp
(setq native-comp-async-report-warnings-errors 'silent)

(setq package-user-dir (concat "~/.emacs.d/elpa-" emacs-version))

;;================================================================================
;;
;; Package management
;;
;;================================================================================

;; Enable the MELPA package repo (http://melpa.org/#/getting-started)
(require 'package)
(setq package-enable-at-startup nil)
(add-to-list 'package-archives
             '("melpa" . "https://melpa.org/packages/"))
(package-initialize)

;; Bootstrap `use-package'
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(eval-when-compile
  (require 'use-package))


;;================================================================================
;;
;; recentf
;;
;;================================================================================
(use-package recentf
  :config
  (recentf-mode 1))


;;================================================================================
;;
;; exec-path-from-shell
;;
;;================================================================================
(use-package exec-path-from-shell
  :if (memq window-system '(mac ns x))
  :ensure t
  :config
  (exec-path-from-shell-copy-envs '("PATH" "DICPATH")))


;;================================================================================
;;
;; Code completion
;;
;;================================================================================
(use-package yasnippet
  :ensure t
  :hook ((prog-mode . yas-minor-mode)))


(use-package company
  :ensure t
  :bind
  ;;("M-[" . company-complete-common)
  :config
  (use-package company-shell
    :ensure t)

  (setq company-show-numbers t
        company-backends     '((company-shell company-shell-env company-capf)))
  (global-company-mode))


;;================================================================================
;;
;; LSP
;;
;;================================================================================
(use-package lsp-mode
  :ensure t
  :commands lsp
  :hook ((c-mode c-ts-mode
          c++-mode c++-ts-mode
          objc-mode
          python-mode python-ts-mode
          sh-mode
          bash-mode bash-ts-mode) . lsp-deferred)
  :bind
  ("C-c i" . lsp-format-region)
  ("C-c u" . lsp-format-buffer)
  ("C-c f d" . lsp-find-definition)
  ("C-c f r" . lsp-find-references)
  ("C-c f p" . xref-pop-marker-stack)
  :config
  (setq lsp-pyls-plugins-autopep8-enabled nil)
  (setq lsp-pyls-plugins-yapf-enabled nil)
  (add-to-list 'lsp-file-watch-ignored-directories "[/\\\\]plt.+\\'")
  (add-to-list 'lsp-file-watch-ignored-directories "[/\\\\]chk.+\\'")
  (add-to-list 'lsp-file-watch-ignored-directories "[/\\\\]Submodules\\'")
  (add-to-list 'lsp-file-watch-ignored-directories "[/\\\\]Docs\\'")
  (add-to-list 'lsp-file-watch-ignored-directories "[/\\\\]submods\\'")
  (add-to-list 'lsp-file-watch-ignored-directories "[/\\\\]build\\'")
  (add-to-list 'lsp-file-watch-ignored-directories "[/\\\\]Build\\'")
  (add-to-list 'lsp-file-watch-ignored-directories "[/\\\\]AMR-WindGoldFiles\\'")
  (add-to-list 'lsp-file-watch-ignored-directories "[/\\\\]test_files\\'")
  (add-to-list 'lsp-file-watch-ignored-directories "[/\\\\]PeleCGoldFiles\\'")
  (add-to-list 'lsp-file-watch-ignored-directories "[/\\\\]tmp_build_dir\\'")
  (add-to-list 'lsp-file-watch-ignored-directories "[/\\\\]spack-build-.+\\'")
  (add-to-list 'lsp-file-watch-ignored-directories "[/\\\\].spack-env\\'")
  (add-to-list 'lsp-file-watch-ignored-directories "[/\\\\].cache\\'")
  (add-to-list 'lsp-file-watch-ignored-directories "[/\\\\]exawind-manager/.tmp\\'")
  (add-to-list 'lsp-file-watch-ignored-directories "[/\\\\]exawind-manager/configs\\'")
  (add-to-list 'lsp-file-watch-ignored-directories "[/\\\\]exawind-manager/docs\\'")
  (add-to-list 'lsp-file-watch-ignored-directories "[/\\\\]exawind-manager/env-templates\\'")
  (add-to-list 'lsp-file-watch-ignored-directories "[/\\\\]exawind-manager/golds\\'")
  (add-to-list 'lsp-file-watch-ignored-directories "[/\\\\]exawind-manager/repos\\'")
  (add-to-list 'lsp-file-watch-ignored-directories "[/\\\\]exawind-manager/scripts\\'")
  (add-to-list 'lsp-file-watch-ignored-directories "[/\\\\]exawind-manager/spack\\'")
  (add-to-list 'lsp-file-watch-ignored-directories "[/\\\\]exawind-manager/spack-manager\\'")
  (add-to-list 'lsp-file-watch-ignored-directories "[/\\\\]exawind-manager/spack-scripting\\'")
  (add-to-list 'lsp-file-watch-ignored-directories "[/\\\\]exawind-manager/stage\\'")
  (add-to-list 'lsp-file-watch-ignored-directories "[/\\\\]exawind-manager/tests\\'")

  ;; Increase garbage collection threshold
  ;; https://emacs-lsp.github.io/lsp-mode/page/performance/
  ;; https://bling.github.io/blog/2016/01/18/why-are-you-changing-gc-cons-threshold/
  (setq gc-cons-threshold 100000000)
  (defun my-minibuffer-setup-hook ()
    (setq gc-cons-threshold most-positive-fixnum))

  (defun my-minibuffer-exit-hook ()
    (setq gc-cons-threshold 100000000))

  (add-hook 'minibuffer-setup-hook #'my-minibuffer-setup-hook)
  (add-hook 'minibuffer-exit-hook #'my-minibuffer-exit-hook)

  ;; Increase the amount of data which Emacs reads from the process
  (setq read-process-output-max (* 1024 1024)) ;; 1mb

  (use-package lsp-ui
    :ensure t
    :after (lsp-mode)
    :hook (lsp-mode . lsp-ui-mode)
    :bind
    ("C-c f u" . lsp-ui-imenu)
    ("C-c f D" . lsp-ui-peek-find-definitions)
    ("C-c f R" . lsp-ui-peek-find-references)
    ([remap xref-find-definitions] . lsp-ui-peek-find-definitions)
    ([remap xref-find-references] . lsp-ui-peek-find-references)
    :config
    (setq lsp-ui-flycheck-enable t))

  ;; Servers
  ;; ccls is in homebrew, to compile from source do:
  ;;  $ git clone --depth=1 --recursive https://github.com/MaskRay/ccls
  ;;  $ cd ccls
  ;;  $ cmake -H. -BRelease -DCMAKE_BUILD_TYPE=Release -DCMAKE_PREFIX_PATH=/usr/local/opt/llvm -DCMAKE_CXX_COMPILER=/usr/local/opt/llvm/bin/clang++
  ;;  $ VERBOSE=1 cmake --build Release
  (use-package ccls
    :ensure t
    :after (lsp-mode)
    :bind
    ("C-c f m" . ccls-member-hierarchy)
    ("C-c f i" .  ccls-inheritance-hierarchy)
    :hook ((c-mode c++-mode objc-mode) .
           (lambda () (require 'ccls) (lsp))))

  (setq lsp-prefer-flymake nil)
  (setq lsp-file-watch-threshold 2000))

(use-package dap-mode
  :ensure t
  :after lsp-mode
  :functions dap-hydra/nil
  :config
  (dap-register-debug-template
   "LLDB::PeleG"
   (list :type "lldb"
         :cwd "/Users/mhenryde/combustion/Pele/PeleG/MyBuild"
         :request "launch"
         :program "pelec"
         :args ["input-3d"]
         :name "LLDB::PeleG"))
  :hook ((after-init . dap-mode)
         (dap-mode . dap-ui-mode)
         (dap-mode . dap-tooltip-mode)
         (dap-session-created . (lambda (_args) (dap-hydra)))
         (dap-stopped . (lambda (_args) (dap-hydra)))
         (dap-terminated . (lambda (&_rest) (dap-hydra/nil)))
         ((c-mode c++-mode objc-mode) . (lambda () (require 'dap-lldb)))))


;;================================================================================
;;
;; Syntax checking
;;
;;================================================================================
(use-package flycheck
  :ensure t
  :init
  (global-flycheck-mode)
  :config
  (setq flycheck-python-flake8-executable "flake8"))


;;================================================================================
;;
;; treesit
;;
;;================================================================================
(use-package treesit
  :if (and (treesit-available-p)
           (fboundp 'treesit-language-available-p))
  :config
  (setq major-mode-remap-alist
         '((bash-mode . bash-ts-mode)
          (sh-mode . bash-ts-mode)
          (c-mode . c-ts-mode)
          (c++-mode . c++-ts-mode)
          (cmake-mode . cmake-ts-mode)
          (python-mode . python-ts-mode)
          (conf-toml-mode . toml-ts-mode)
          (yaml-mode . yaml-ts-mode)))
  (use-package treesit-auto
    :ensure t
    :config
    (setq treesit-auto-install 'prompt)
    (global-treesit-auto-mode))
  (use-package treesit-fold
    :ensure t))


;;================================================================================
;;
;; Projectile
;;
;;================================================================================
(use-package projectile
  :ensure t
  :bind
  ("C-c p a" . projectile-find-other-file)
  ("C-c p p" . projectile-switch-project)
  ("C-c p f" . projectile-find-file)
  ("C-c p d" . projectile-find-dir)
  ("C-c p b" . projectile-switch-to-buffer)
  ("C-c p e" . projectile-recentf)
  :config
  (setq projectile-globally-ignored-files
        (append projectile-globally-ignored-files
                '(".DS_Store" ".dir-locals.el" ".pyc"))
        projectile-globally-ignored-directories
        (append projectile-globally-ignored-directories
                '("build" "__pycache__" "Build"))
        projectile-enable-caching t
        projectile-completion-system 'default)
  (add-to-list 'projectile-other-file-alist '("C" "H" "hpp" "hxx"))
  (add-to-list 'projectile-other-file-alist '("H" "cpp" "cc" "cxx"))

  (projectile-mode))


;;================================================================================
;;
;; Vertico
;;
;;================================================================================
(use-package vertico
  :ensure t
  :init
  (vertico-mode)
  :custom
  (vertico-cycle t))

(use-package vertico-directory
  :after vertico
  :ensure nil
  ;; More convenient directory navigation commands
  :bind (:map vertico-map
              ("RET" . vertico-directory-enter)
              ("DEL" . vertico-directory-delete-char)
              ("<right>" . vertico-directory-enter)
              ("<left>" . vertico-directory-delete-char)
              ("M-DEL" . vertico-directory-delete-word))
  ;; Tidy shadowed file names
  :hook (rfn-eshadow-update-overlay . vertico-directory-tidy))

(use-package vertico-quick
  :after vertico
  :ensure nil
  :bind (:map vertico-map
              ("C-i" . vertico-quick-insert)
              ("C-o" . vertico-quick-exit)))


;;================================================================================
;;
;; Orderless
;;
;;================================================================================
(use-package orderless
  :ensure t
  :init
  (setq completion-styles '(orderless basic)
        completion-category-defaults nil
        completion-category-overrides '((file (styles partial-completion)))))


;;================================================================================
;;
;; savehist
;;
;;================================================================================
;; Persist history over Emacs restarts.
(use-package savehist
  :init
  (savehist-mode))


;;================================================================================
;;
;; Consult
;;
;;================================================================================
(use-package consult
  :bind
  (("C-c h" . consult-history)
   ("C-x b" . consult-buffer)
   ("M-g g" . consult-goto-line)
   ("M-g M-g" . consult-goto-line)
   ("C-c g" . consult-git-grep)
   ("C-c s" . consult-git-grep-symbol-at-point)
   ("C-s" . consult-line-symbol-at-point)
   ("C-r" . consult-line-symbol-at-point))
  :config
  (defun consult-line-symbol-at-point ()
    "Use symbol at point for consult-line."
    (interactive)
    (consult-line (thing-at-point 'symbol)))
  (defun consult-git-grep-symbol-at-point ()
    "Use symbol at point for consult-git-grep."
    (interactive)
    (require 'project)
    (consult-git-grep (project-root (project-current)) (thing-at-point 'symbol))))

(use-package consult-company
  :ensure t
  :after (consult company)
  :config
  (define-key company-mode-map [remap completion-at-point] #'consult-company))

(use-package consult-lsp
  :ensure t
  :after (consult lsp))

(use-package consult-projectile
  :ensure t
  :after (consult projectile)
  :bind
  ("C-c p h" . consult-projectile)
  ([remap projectile-switch-project] . consult-projectile-switch-project)
  ([remap projectile-find-file] . consult-projectile-find-file)
  ([remap projectile-find-dir] . consult-projectile-find-dir)
  ([remap projectile-switch-to-buffer] . consult-projectile-switch-to-buffer)
  ([remap projectile-recentf] . consult-projectile-recentf))


;;================================================================================
;;
;; Embark
;;
;;================================================================================
(use-package embark
  :ensure t
  :after consult
  :bind
  (("M-." . embark-act)
   ("M-," . embark-dwim)
   :map embark-general-map
   ("C-s" . consult-line)
   ("C-c g" . embark-consult-git-grep))
  :custom
  (embark-help-key "?")
  :init
  ;; Optionally replace the key help with a completing-read interface
  (setq prefix-help-command #'embark-prefix-help-command)
  :config
  (defun embark-consult-git-grep (target)
    "Use consult-git-grep on target."
    (consult-git-grep nil target))
  ;; Hide the mode line of the Embark live/completions buffers
  (add-to-list 'display-buffer-alist
               '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                 nil
                 (window-parameters (mode-line-format . none)))))

(use-package embark-consult
  :ensure t
  :after (embark consult)
  :demand t
  :hook
  (embark-collect-mode . consult-preview-at-point-mode))


;;================================================================================
;;
;; Enable richer annotations using the Marginalia package
;;
;;================================================================================
(use-package marginalia
  :ensure t
  :init
  (marginalia-mode))


;;================================================================================
;;
;; Moving around with avy
;;
;;================================================================================
(use-package avy
  :ensure t
  :bind
  ("M-;" . avy-goto-char-timer)
  ("M-j" . hydra-avy/body)
  :config
  (defhydra hydra-avy (:exit t :hint nil)
    "
 Line^^       Region^^        Goto
----------------------------------------------------------
 [_y_] yank   [_Y_] yank      [_c_] timed char
 [_m_] move   [_M_] move      [_w_] word
 [_k_] kill   [_K_] kill      [_l_] line        [_L_] end of line"
    ("c" avy-goto-char-timer)
    ("w" avy-goto-word-1)
    ("l" avy-goto-line)
    ("L" avy-goto-end-of-line)
    ("m" avy-move-line)
    ("M" avy-move-region)
    ("k" avy-kill-whole-line)
    ("K" avy-kill-region)
    ("y" avy-copy-line)
    ("Y" avy-copy-region)))


;;================================================================================
;;
;; Navigating windows with ace-window
;;
;;================================================================================
(use-package ace-window
  :ensure t
  :bind ("M-o" . ace-window)
  :config
  (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l)))


;;================================================================================
;;
;; Wgrep
;;
;;================================================================================
(use-package wgrep
  :ensure t)


;;================================================================================
;;
;; Kill current buffer, but ask to save, but only if it has been modified
;;
;;================================================================================
;; Based on
;; http://ergoemacs.org/emacs/elisp_close_buffer_open_last_closed.html
;; and
;; http://stackoverflow.com/questions/2357881/emacs-cant-get-buffer-offer-save-working
(defun kill-this-buffer-volatile ()
    "Kill current buffer, even if it has been modified.  But ask to save first."
    (interactive)
    (if (buffer-modified-p)
    (if (y-or-n-p (format "Buffer %s modified; Do you want to save? " (buffer-name)))
              (save-buffer)))
    (kill-this-buffer))

;; set the hotkey
(global-set-key (kbd "C-x C-k") 'kill-this-buffer-volatile)


;;================================================================================
;;
;; C/C++
;;
;;================================================================================
(add-to-list 'auto-mode-alist '("\\.H\\'" . c++-mode))
(add-to-list 'auto-mode-alist '("\\.C\\'" . c++-mode))
(add-to-list 'auto-mode-alist '("\\.cu\\'" . c++-mode))
(add-to-list 'auto-mode-alist '("\\.geo\\'" . c++-mode))

(use-package modern-cpp-font-lock
    :ensure t
    :hook (c++-mode . modern-c++-font-lock-mode))


;;================================================================================
;;
;; Clang formatting
;;
;;================================================================================
(use-package clang-format
  :ensure t)


;;================================================================================
;;
;; Fortran
;;
;;================================================================================
(use-package fortran
  :init
  ;; Make Fortran indent at the level of the code. Not a fixed width.
  (add-hook 'f90-mode-hook
            (lambda ()
              (setq fortran-comment-indent-style 'relative))))


;;================================================================================
;;
;; Latex
;;
;;================================================================================
(use-package auctex
  :ensure t
  :mode
  ("\\.tex\\'" . LaTeX-mode)
  :commands (latex-mode LaTeX-mode plain-tex-mode)
  :bind
  ("C-c %" . replace-newlines-with-percent-in-region)
  ("M-F" . insert-figure-reference)
  ("M-E" . insert-equation-reference)
  ("M-T" . insert-table-reference)
  ("M-H" . insert-chapter-reference)
  ("M-G" . insert-appendix-reference)
  ("M-L (" . insert-left-right-paren)
  ("M-L {" . insert-left-right-brace)
  ("M-L [" . insert-left-right-bracket)
  :config
  (add-to-list 'TeX-command-list
               '("Make" "make" TeX-run-compile nil t
                 :help "Compile with Makefile"))

  ;; function to replace all \n with %\n in a region. Useful for latex
  ;; when you are in the minipage environment.
  (defun replace-newlines-with-percent-in-region ()
    "Replace newlines with %\n in region."
    (interactive)
    (save-restriction
      (narrow-to-region (point) (mark))
      (goto-char (point-min))
      (while (search-forward "\n" nil t) (replace-match "%\n" nil t))))

  (defun insert-figure-reference ()
    "Insert a figure reference for LaTex."
    (interactive)
    (insert "Figure\\,\\ref{fig:}") (backward-char 1))

  (defun insert-equation-reference ()
    "Insert an equation reference for LaTex."
    (interactive)
    (insert "Equation\\,(\\ref{eq:})") (backward-char 2))

  (defun insert-table-reference ()
    "Insert a table reference for LaTex."
    (interactive)
    (insert "Table\\,\\ref{tab:}") (backward-char 1))

  (defun insert-chapter-reference ()
    "Insert a chapter reference for LaTex."
    (interactive)
    (insert "Chapter\\,\\ref{chap:}") (backward-char 1))

  (defun insert-appendix-reference ()
    "Insert an appendix reference for LaTex."
    (interactive)
    (insert "Appendix\\,\\ref{app:}") (backward-char 1))

  (defun insert-left-right-paren ()
    "Insert a left right paren for LaTex math mode."
    (interactive)
    (insert "\\left( \\right)") (backward-char 8))

  (defun insert-left-right-brace ()
    "Insert a left right brace for LaTex math mode."
    (interactive)
    (insert "\\left\\{ \\right\\}") (backward-char 9))

  (defun insert-left-right-bracket ()
    "Insert a left right bracket for LaTex math mode."
    (interactive)
    (insert "\\left[ \\right]") (backward-char 8))

  (setq TeX-auto-save t
        TeX-newline-function 'reindent-then-newline-and-indent
        TeX-parse-self t))

(use-package bibtex
  :ensure t
  :mode ("\\.bib\\'" . bibtex-mode))


;;================================================================================
;;
;; Dictionary stuff
;;
;;================================================================================
(use-package ispell
  :ensure t
  :config
  (cond
   ((executable-find "hunspell")
    (setenv
     "DICPATH"
     (concat (getenv "HOME") "/.local/share/hunspell/dicts"))
    (setq ispell-program-name "hunspell")
    (setq ispell-extra-args   '("-d en_US")))
   ((executable-find "aspell")
    (setq ispell-program-name "aspell")
    (setq ispell-extra-args   '("--sug-mode=ultra"
                                "--lang=en_US"))))
  (message "Using spell checker: %s" ispell-program-name)

  ;; Switch dictionaries
  (defun fd-switch-dictionary()
    "Binding to switch between dictionaries."
    (interactive)
    (let* ((dic ispell-current-dictionary)
           (change (if (string= dic "francais") "en_US" "francais")))
      (ispell-change-dictionary change)
      (message "Dictionary switched from %s to %s" dic change)
      ))

  (use-package flyspell
    :ensure t
    :config
    (use-package flyspell-correct
      :ensure t
      :bind
      ;;("C-c s" . 'flyspell-correct-previous-word-generic)
      )

    ;; No spell check for code snippets in Markdown
    (defun flyspell-generic-textmode-verify ()
      "Used for `flyspell-generic-check-word-predicate' in text modes."
      ;; (point) is next char after the word. Must check one char before.
      (let ((f (get-text-property (- (point) 1) 'face)))
        (not (memq f '(markdown-pre-face)))))
    (setq flyspell-generic-check-word-predicate 'flyspell-generic-textmode-verify)

    (add-hook 'text-mode-hook #'flyspell-mode)
    (add-hook 'org-mode-hook #'flyspell-mode)
    (add-hook 'latex-mode-hook #'flyspell-mode)
    (add-hook 'tex-mode-hook #'flyspell-mode)
    (add-hook 'prog-mode-hook #'flyspell-prog-mode)))


;;================================================================================
;;
;; Color theme
;;
;;================================================================================
(use-package reverse-theme
  :ensure t)
(use-package zenburn-theme
  :ensure t
  :init
  (load-theme 'zenburn t))


;;================================================================================
;;
;; Mode line
;;
;;================================================================================
(use-package minions
  :ensure t
  :config
  (minions-mode 1))

(use-package doom-modeline
  :ensure t
  :config
  (doom-modeline-mode 1)
  (setq doom-modeline-minor-modes t))


;;================================================================================
;;
;; Anzu
;;
;;================================================================================
(use-package anzu
  :ensure t
  :bind
  ("M-%" . anzu-query-replace)
  :config
  (global-anzu-mode 1))


;;================================================================================
;;
;; Icons
;;
;;================================================================================
(use-package all-the-icons
  :ensure t
  :if (display-graphic-p)
  :config
  (let ((font-marker-file (expand-file-name ".all-the-icons-installed" user-emacs-directory)))
    (unless (file-exists-p font-marker-file)
      (all-the-icons-install-fonts t)
      (with-temp-buffer (write-file font-marker-file)))))

(use-package all-the-icons-completion
  :ensure t
  :after all-the-icons
  :if (display-graphic-p)
  :config
  (all-the-icons-completion-mode))


;;================================================================================
;;
;; OSX specific
;;
;;================================================================================
(if (eq system-type 'darwin)
    (when (display-graphic-p)
      (setq mac-command-modifier 'control)))


;;================================================================================
;;
;; Shell editing
;;
;;================================================================================
(use-package sh-script
  :mode
  ("\\.zsh\\'" . sh-mode)
  ("\\.pbs\\'" . sh-mode))


;;================================================================================
;;
;; Word counting
;;
;;================================================================================
(use-package wc-mode
  :ensure t
  :bind
  ("\C-cw" . wc-mode))


;;================================================================================
;;
;; Org-mode
;;
;;================================================================================
(use-package org
  :ensure t
  :bind
  ("C-c a" . org-agenda)
  :init
  (setq org-startup-truncated nil)
  (setq org-log-done 'note)
  (setq org-lowest-priority ?E)
  (setq org-agenda-files '("~/org/work.org" "~/org/di.org")))


;;================================================================================
;;
;; Markdown and polymode
;;
;;================================================================================
(use-package markdown-mode
  :ensure t
  :mode
  ("README\\.md\\'" . gfm-mode)
  ("\\.md\\'" . markdown-mode)
  ("\\.markdown\\'" . markdown-mode))

(use-package polymode
  :ensure t
  :mode
  ("\\.Snw\\'" . poly-noweb+r-mode)
  ("\\.Rnw\\'" . poly-noweb+r-mode)
  ("\\.Rmd\\'" . poly-markdown+r-mode))


;;================================================================================
;;
;; reStructuredText
;;
;;================================================================================
(use-package rst
  :ensure t
  :mode
  ("\\.rst\\'" . rst-mode)
  ("\\.rest\\'" . rst-mode))


;;================================================================================
;;
;; Python
;;
;;================================================================================
(use-package python)
;; add this to autoformat before saving:
;;  :hook ((python-mode . (lambda () (add-hook 'before-save-hook 'lsp-format-buffer nil 'local)))))

(use-package pyvenv
  :ensure t
  :config
  (pyvenv-workon "dotfiles"))

(use-package jedi
  :ensure t)


;;================================================================================
;;
;; Git
;;
;;================================================================================
(use-package magit
  :ensure t
  :bind
  ("M-m" . magit-status))


;;================================================================================
;;
;; Haskell
;;
;;================================================================================
(use-package haskell-mode
  :ensure t
  :mode
  ("\\.hs\\'" . haskell-mode)
  ("\\.lhs\\'" . haskell-mode))


;;================================================================================
;;
;; YAML
;;
;;================================================================================
(use-package yaml-mode
  :ensure t
  :mode
  ("\\.yml\\'" . yaml-mode)
  ("\\.clang-format\\'" . yaml-mode))


;;================================================================================
;;
;; Rainbow delimiters
;;
;;================================================================================
(use-package rainbow-delimiters
  :ensure t
  :init
  (add-hook 'prog-mode-hook 'rainbow-delimiters-mode))


;;================================================================================
;;
;; Smart pairs of parenthesis
;;
;;================================================================================
(use-package smartparens
  :ensure t
  :bind
  ("C-M-k" . sp-kill-sexp)
  ("C-M-f" . sp-forward-sexp)
  ("C-M-b" . sp-backward-sexp)
  ("C-M-n" . sp-next-sexp)
  ("C-M-p" . sp-previous-sexp)
  ("C-M-u" . sp-up-sexp)
  ("C-M-d" . sp-down-sexp)
  ("C-M-w" . sp-copy-sexp)
  ("C-M-a" . sp-beginning-of-sexp)
  ("C-M-e" . sp-end-of-sexp)
  :init
  (show-smartparens-global-mode t)
  (smartparens-global-mode t)
  :config
  (sp-with-modes '(html-mode sgml-mode nxml-mode web-mode)
    (sp-local-pair "<" ">"))

  (use-package smartparens-config))


;;================================================================================
;;
;; Ediff
;;
;;================================================================================
(use-package ediff
  :ensure t
  :init
  ;; Customize the colors of the non-current changes
  (add-hook 'ediff-load-hook
            (lambda ()
              (setq ediff-split-window-function 'split-window-horizontally)
              (setq ediff-merge-split-window-function 'split-window-horizontally)
              (set-face-background
               ediff-odd-diff-face-A "dim gray")
              (set-face-background
               ediff-even-diff-face-A "dim gray")
              (set-face-background
               ediff-odd-diff-face-B "dim gray")
              (set-face-background
               ediff-even-diff-face-B "dim gray")
              (set-face-background
               ediff-odd-diff-face-C "dim gray")
              (set-face-background
               ediff-even-diff-face-C "dim gray"))))


;;================================================================================
;;
;; Cmake
;;
;;
;;================================================================================
(use-package cmake-mode
  :ensure t
  :mode
  ("CMakeLists\\.txt\\'" . cmake-mode)
  ("\\.cmake\\'" . cmake-mode))


;;================================================================================
;;
;; Automatic music layout
;; Uses EMMS (which requires mp3info and vorbis-tools)
;;
;;================================================================================
(use-package music-setup
  :bind
  ("C-c m" . my-music-layout)
  :init
  (defvar my-music-directory "~/my_music")

  (use-package emms
    :ensure t
    :bind
    ("C-c e b" . emms-smart-browse)
    ("C-c e p" . emms-pause)
    ("C-c e n" . emms-next)
    ("C-c e t" . emms-previous)
    :config
    (emms-all)

    (emms-default-players)
    (define-emms-simple-player flac123 '(file)
      "\\.flac\\'" "flac123")
    (add-to-list 'emms-player-list emms-player-flac123)

    ;; use GNU find on OSX (brew install findutils)
    (if (eq system-type 'darwin)
        (setq emms-source-file-gnu-find "gfind"))

    ;; Use libtag exclusively for tagging
    ;; Requires building emms-print-metadata and it being in your path
    (require 'emms-info-libtag)
    (setq emms-info-functions '(emms-info-libtag))

    (setq emms-source-file-default-directory my-music-directory
          emms-playlist-buffer-name "*Music Playlist*"
          emms-playlist-default-major-mode 'emms-playlist-mode
          emms-show-format "♪ %s"
          emms-browser-default-covers (list (concat (file-name-as-directory my-music-directory) "cover_small.jpg")
                                            (concat (file-name-as-directory my-music-directory) "cover_med.jpg")
                                            nil)
          emms-browser-info-artist-format "%i● %n"
          emms-browser-info-album-format "%i◎%cS%n"
          emms-browser-info-genre-format "%i● %n"
          emms-browser-info-title-format "%i♪ %T. %n"
          emms-browser-playlist-info-artist-format emms-browser-info-artist-format
          emms-browser-playlist-info-album-format emms-browser-info-album-format
          emms-browser-playlist-info-title-format emms-browser-info-title-format))

  (use-package pianobar
    :ensure t
    :bind
    ("C-c b p" . pianobar-play-or-pause)
    ("C-c b n" . pianobar-next-song)
    ("C-c b q" . pianobar-quit)
    ("C-c b s" . pianobar-change-station)
    ("C-c b t" . pianobar-ban-current-song)
    :config
    (setq pianobar-config t))

  (defun my-music-layout ()
    (interactive)
    (delete-other-windows)
    (emms-smart-browse)))


;;================================================================================
;;
;; RSS feeds with elfeed
;;
;;================================================================================
(use-package elfeed
  :ensure t
  :bind
  ("C-x w" . elfeed)
  :config
  (setq elfeed-feeds
        '(("http://rss.rtbf.be/media/rss/audio/c21-class_recent.xml" podcast))))


;;================================================================================
;;
;; Dired
;;
;;================================================================================
(use-package dired
  :config
  (defun dired-ediff-files ()
    """Diff files in dired mode by pressing 'e'. From https://oremacs.com/2017/03/18/dired-ediff."""
    (interactive)
    (let ((files (dired-get-marked-files))
          (wnd (current-window-configuration)))
      (if (<= (length files) 2)
          (let ((file1 (car files))
                (file2 (if (cdr files)
                           (cadr files)
                         (read-file-name
                          "file: "
                          (dired-dwim-target-directory)))))
            (if (file-newer-than-file-p file1 file2)
                (ediff-files file2 file1)
              (ediff-files file1 file2))
            (add-hook 'ediff-after-quit-hook-internal
                      (lambda ()
                        (setq ediff-after-quit-hook-internal nil)
                        (set-window-configuration wnd))))
        (error "No more than 2 files should be marked"))))
  (define-key dired-mode-map "e" 'dired-ediff-files))


;;================================================================================
;;
;; JSON
;;
;;================================================================================
(use-package json-mode
  :ensure t
  :mode ("\\.json\\'" . json-mode))


;;================================================================================
;;
;; Hydra
;;
;;================================================================================
(use-package hydra
  :ensure t
  :bind
  (("C-y" . hydra-yank-pop/yank)
   ("M-y" . hydra-yank-pop/yank-pop)
   ("C-n" . hydra-move/next-line)
   ("C-p" . hydra-move/previous-line)
   ("C-f" . hydra-move/forward-char)
   ("C-b" . hydra-move/backward-char)
   ("C-a" . hydra-move/beginning-of-line)
   ("C-e" . hydra-move/move-end-of-line)
   ("C-v" . hydra-move/scroll-up-command)
   ("M-v" . hydra-move/scroll-down-command)
   ("C-l" . hydra-move/recenter-top-bottom)
   :map minibuffer-local-map
   ("C-n" . next-line)
   ("C-p" . previous-line)
   ("C-f" . forward-char)
   ("C-b" . backward-char)
   ("C-a" . beginning-of-line)
   ("C-a" . beginning-of-line)
   ("C-a" . beginning-of-line)
   ("C-e" . move-end-of-line)
   ("C-v" . scroll-up-command)
   ("M-v" . scroll-down-command)
   ("C-l" . recenter-top-bottom))
  :config

  (defhydra hydra-yank-pop ()
    "yank"
    ("C-y" yank nil)
    ("M-y" yank-pop nil)
    ("y" (consult-yank-pop 1) "next")
    ("Y" (consult-yank-pop -1) "prev")
    ("l" consult-yank-replace "list" :color blue))

  (defhydra hydra-move ()
    "move"
    ("n" next-line)
    ("p" previous-line)
    ("f" forward-char)
    ("b" backward-char)
    ("a" beginning-of-line)
    ("e" move-end-of-line)
    ("v" scroll-up-command)
    ("V" scroll-down-command)
    ("l" recenter-top-bottom)
    ("." avy-goto-char-timer :color blue)))


;;================================================================================
;;
;; gptel llm
;;
;;================================================================================
(use-package gptel
  :ensure t
  :bind
  ("C-c C-c" . gptel-send)
  ("C-c C-g" . gptel-menu)
  :config
  (setq gptel-backend (gptel-make-ollama "Ollama"
                        :host "localhost:11434"
                        :stream t
                        :models '(deepseek-r1:14b llama3.2 mistral-small:latest))
        gptel-model 'deepseek-r1))


;;================================================================================
;;
;; Miscellaneous functions
;;
;;================================================================================

;; Stefan Monnier <foo at acm.org>. It is the opposite of fill-paragraph (M-q)
(defun unfill-paragraph ()
  "Take a multi-line paragraph and make it into a single line of text."
  (interactive)
  (let ((fill-column (point-max)))
    (fill-paragraph nil)))

;;================================================================================
;;
;; Programming mode
;;
;;================================================================================
(use-package prog-mode
  :bind
  ("RET" . newline-and-indent))


;;================================================================================
;;
;; Fun startup message
;;
;;================================================================================
(defconst animate-n-steps 0)
(defun emacs-reloaded()
  "Custom startup message."
  (animate-string (concat";;Initialization successful. Greetings, Commander, and welcome to a world of pain: "
                         (substring (emacs-version) 0 15))
                  0 0)
  (newline-and-indent) (newline-and-indent))
(add-hook 'after-init-hook 'emacs-reloaded)
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(emms-browser-album-face ((t (:inherit font-lock-variable-name-face))))
 '(emms-browser-artist-face ((t (:inherit font-lock-function-name-face))))
 '(emms-browser-composer-face ((t (:inherit emms-browser-artist-face))))
 '(emms-browser-performer-face ((t (:inherit emms-browser-artist-face))))
 '(emms-browser-track-face ((t (:inherit default))))
 '(emms-playlist-selected-face ((t (:inherit font-lock-string-face))))
 '(emms-playlist-track-face ((t (:inherit default))))
 '(emms-stream-name-face ((t (:inherit emms-browser-artist-face))))
 '(emms-stream-url-face ((t (:inherit default)))))


;;================================================================================
;;
;; Minor mode shortcuts (put at end of file)
;;
;;================================================================================
;; If a global-set-key didn't work because it was overwritten by a major mode,
;; add it here. (from http://stackoverflow.com/questions/683425/globally-override-key-binding-in-emacs)
(defvar my-keys-minor-mode-map
  (let ((map (make-sparse-keymap)))
    (define-key map (kbd "C-M-i") 'indent-region)
    (define-key map (kbd "C-c C-z") 'comment-region)
    (define-key map (kbd "M-R") 'kill-rectangle)
    (define-key map (kbd "M-r") 'yank-rectangle)
    (define-key map (kbd "M-k") 'kill-whole-line)
    (define-key map (kbd "C-c C-z") 'comment-region)
    (define-key map (kbd "C-c M-z") 'uncomment-region)
    map)
  "Keymap my-keys-minor-mode.")

(define-minor-mode my-keys-minor-mode
  "A minor mode so that my key settings override annoying major modes."
  :init-value t
  :lighter " my-keys")

(my-keys-minor-mode 1)

;; Turn off the custom mode in the minibuffer
(defun my-minibuffer-setup-hook ()
  "Turn off my keymap in the minibuffer."
  (my-keys-minor-mode 0))

(add-hook 'minibuffer-setup-hook 'my-minibuffer-setup-hook)

(provide '.emacs)
;;; .emacs ends here
